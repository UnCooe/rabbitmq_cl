# .github/workflows/cd.yml
name: Continuous Deployment (构建并部署到服务器)

on:
  push:
    branches: [ "dev" ] # 仅在推送到 dev 分支时触发

jobs:
  build-and-push:
    name: 构建并推送 Docker 镜像
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: . # 构建上下文是仓库根目录
          file: ./Dockerfile # Dockerfile 在仓库根目录
          push: true
          # 修正缩进，并使用标准格式 ghcr.io/用户名/仓库名:latest
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha # 启用 GitHub Actions 构建缓存
          cache-to: type=gha,mode=max

  deploy:
    name: 部署到服务器
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: 通过 SSH 部署
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          script: |
            # 登录到 GitHub Container Registry (如果镜像是私有的)
            # 如果 GITHUB_TOKEN 权限足够，可能不需要 CR_PAT
            # echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 定义镜像名称 (与 build job 中的 tags 一致)
            IMAGE_NAME="ghcr.io/${{ github.repository }}:latest"
            CONTAINER_NAME="rabbitmq_demo_app" # 给你的应用容器起个名字

            # 拉取最新镜像
            docker pull $IMAGE_NAME

            # 停止旧容器 (如果存在)
            docker stop $CONTAINER_NAME || true

            # 删除旧容器 (如果存在)
            docker rm $CONTAINER_NAME || true

            # 启动新容器
            # --restart always 保证容器意外退出后会自动重启
            # -e RABBITMQ_HOST=... 使用 Secret 设置 RabbitMQ 地址
            # --network=... (可选) 如果需要连接到特定 Docker 网络
            docker run -d --name $CONTAINER_NAME --restart always \
              -e RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }} \
              $IMAGE_NAME

            # (可选) 清理旧的、未使用的 Docker 镜像以节省空间
            docker image prune -f 