# .github/workflows/cd.yml
name: Continuous Deployment (构建并部署)

on:
  push:
    # 同时监听 dev 和 main 分支的推送
    branches: [ "dev", "master" ] # <---- 修改点 1: 添加 main 分支

jobs:
  build-and-push:
    name: 构建并推送 Docker 镜像
    runs-on: ubuntu-latest
    outputs: # 定义此 job 的输出
      docker_tag: ${{ steps.prep.outputs.docker_tag }} # 输出小写的 docker 标签

    permissions:
      contents: read
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 准备 Docker 标签 (强制小写)
        id: prep # 给这个步骤一个 ID，方便后面引用输出
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          TAG="ghcr.io/${REPO}:latest"
          # 如果是 dev 分支，可以考虑添加 dev 标签，例如 :dev
          # if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
          #   TAG="ghcr.io/${REPO}:dev"
          # fi
          echo "Using Docker tag: ${TAG}" # 添加日志方便调试
          echo "docker_tag=${TAG}" >> $GITHUB_OUTPUT # 设置步骤输出

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.docker_tag }} # 使用准备好的标签
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: 部署到远程服务器
    needs: build-and-push # 依赖上一个 job 完成
    # <---- 修改点 2: 添加条件判断，仅在 main 分支运行时执行此 job ---->
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: 通过 SSH 部署
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }} # 确保 main 分支触发时 Secrets 已配置
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          script: |
            # 登录到 GitHub Container Registry (如果镜像是私有的)
            # 如果 GITHUB_TOKEN 权限足够，可能不需要 CR_PAT
            # echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 定义镜像、容器和网络名称
            IMAGE_NAME="${{ needs.build-and-push.outputs.docker_tag }}"
            CONTAINER_NAME="rabbitmq_demo_app"
            NETWORK_NAME="demo-net" # 确保和手动创建的网络名称一致

            # 确保网络存在 (如果手动创建失败或被删除，这里会尝试再次创建)
            docker network create $NETWORK_NAME || true

            # 拉取最新镜像
            docker pull $IMAGE_NAME

            # 停止旧容器 (如果存在)
            docker stop $CONTAINER_NAME || true

            # 删除旧容器 (如果存在)
            docker rm $CONTAINER_NAME || true

            # 启动新容器，并连接到 demo-net 网络
            docker run -d --name $CONTAINER_NAME --restart always \
              --network $NETWORK_NAME \
              -e RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }} \
              $IMAGE_NAME

            # (可选) 清理旧的、未使用的 Docker 镜像以节省空间
            docker image prune -f 